{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_CATS_PENDING, REQUEST_CATS_SUCCESS, REQUEST_CATS_FAILED } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestCats = dispatch => {\n  dispatch({\n    type: REQUEST_CATS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_CATS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_CATS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/martin/Desktop/udemy/react/robofriends/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_CATS_PENDING","REQUEST_CATS_SUCCESS","REQUEST_CATS_FAILED","setSearchField","text","type","payload","requestCats","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACIA,mBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,EAIIC,mBAJJ,QAKO,gBALP;AAOA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACrCC,EAAAA,IAAI,EAAEN,mBAD+B;AAErCO,EAAAA,OAAO,EAAEF;AAF4B,CAAX,CAAvB;AAKP,OAAO,MAAMG,WAAW,GAAGC,QAAQ,IAAI;AACnCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAIL,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,oBAAR;AAA8BK,IAAAA,OAAO,EAAEO;AAAvC,GAAD,CAF1B,EAGKC,KAHL,CAGWC,KAAK,IAAIP,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,mBAAR;AAA6BI,IAAAA,OAAO,EAAES;AAAtC,GAAD,CAH5B;AAIH,CANM","sourcesContent":["import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_CATS_PENDING,\n    REQUEST_CATS_SUCCESS,\n    REQUEST_CATS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestCats = dispatch => {\n    dispatch({ type: REQUEST_CATS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_CATS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_CATS_FAILED, payload: error }));\n};"]},"metadata":{},"sourceType":"module"}