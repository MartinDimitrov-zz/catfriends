{"ast":null,"code":"import{CHANGE_SEARCH_FIELD,REQUEST_CATS_PENDING,REQUEST_CATS_SUCCESS,REQUEST_CATS_FAILED}from'./constants.js';export var setSearchField=function setSearchField(text){return{type:CHANGE_SEARCH_FIELD,payload:text};};export var requestCats=function requestCats(dispatch){dispatch({type:REQUEST_CATS_PENDING});fetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(data){return dispatch({type:REQUEST_CATS_SUCCESS,payload:data});}).catch(function(error){return dispatch({type:REQUEST_CATS_FAILED,payload:error});});};","map":{"version":3,"sources":["/Users/martin/Desktop/react/robofriends/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_CATS_PENDING","REQUEST_CATS_SUCCESS","REQUEST_CATS_FAILED","setSearchField","text","type","payload","requestCats","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,OACIA,mBADJ,CAEIC,oBAFJ,CAGIC,oBAHJ,CAIIC,mBAJJ,KAKO,gBALP,CAOA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,QAAW,CACrCC,IAAI,CAAEN,mBAD+B,CAErCO,OAAO,CAAEF,IAF4B,CAAX,EAAvB,CAKP,MAAO,IAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,QAAQ,CAAI,CACnCA,QAAQ,CAAC,CAAEH,IAAI,CAAEL,oBAAR,CAAD,CAAR,CACAS,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACU,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADlB,EAEKF,IAFL,CAEU,SAAAG,IAAI,QAAIL,CAAAA,QAAQ,CAAC,CAAEH,IAAI,CAAEJ,oBAAR,CAA8BK,OAAO,CAAEO,IAAvC,CAAD,CAAZ,EAFd,EAGKC,KAHL,CAGW,SAAAC,KAAK,QAAIP,CAAAA,QAAQ,CAAC,CAAEH,IAAI,CAAEH,mBAAR,CAA6BI,OAAO,CAAES,KAAtC,CAAD,CAAZ,EAHhB,EAIH,CANM","sourcesContent":["import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_CATS_PENDING,\n    REQUEST_CATS_SUCCESS,\n    REQUEST_CATS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestCats = dispatch => {\n    dispatch({ type: REQUEST_CATS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_CATS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_CATS_FAILED, payload: error }));\n};"]},"metadata":{},"sourceType":"module"}