{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cats","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestCats","searchField","onSearchChange","isPending","filterCats","filter","cat","toLowerCase","includes","connect","searchCats","requestCats","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateCats","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.70504db5.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ id, name, email }) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?set=set4`} alt='Card'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>        \n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({cats}) => {\n    return(\n        <div>\n            {\n            cats.map((user, i) => {\n                return (\n                    <Card \n                        key={i} id={cats[i].id} \n                        name={cats[i].name} \n                        email={cats[i].email}\n                    />\n                );\n            })\n            }\n        </div>   \n    );\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue' \n                type='search' \n                placeholder='Search cats'\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{\n            overflowY: 'scroll',\n            border: '1px solid black',\n            height: '600px'\n        }}>\n            { props.children }\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    \n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            hasError: false\n        };\n    }\n    \n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n    \n    render() {\n        if(this.state.hasError) {\n            return <h1>Oooops. This is not good!</h1>; \n        }\n        return this.props.children;\n    }\n    \n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n//import {cats} from './cats';\nimport './App.css';\n\nimport { setSearchField, requestCats } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchCats.searchField,\n        cats: state.requestCats.cats,\n        isPending: state.requestCats.isPending,\n        error: state.requestCats.error\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestCats: () => requestCats(dispatch)\n    };\n};\n\nclass App extends Component {\n    \n    componentDidMount() {\n        this.props.onRequestCats();\n    }\n    \n    render() {\n        const { searchField, onSearchChange, cats, isPending } = this.props;\n        const filterCats = cats.filter(cat => {\n            return cat.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        \n        if(isPending) {\n            return <h1 className='tc pt7'>LOADING...</h1>;\n        } else {\n            return(\n                <div className='tc'>\n                    <h1 className='f1'>Cat Friends</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList cats={filterCats}/>\n                        </ErrorBoundry>                        \n                    </Scroll>\n                </div>\n            );\n        }\n    }\n };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_CATS_PENDING,\n    REQUEST_CATS_SUCCESS,\n    REQUEST_CATS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestCats = dispatch => {\n    dispatch({ type: REQUEST_CATS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_CATS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_CATS_FAILED, payload: error }));\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_CATS_PENDING = 'REQUEST_CATS_PENDING';\nexport const REQUEST_CATS_SUCCESS = 'REQUEST_CATS_SUCCESS';\nexport const REQUEST_CATS_FAILED = 'REQUEST_CATS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_CATS_PENDING,\n    REQUEST_CATS_SUCCESS,\n    REQUEST_CATS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nexport const searchCats = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n};\n\nconst initialStateCats = {\n    isPending: false,\n    cats: [],\n    error: ''\n};\n\nexport const requestCats = (state=initialStateCats, action={}) => {\n    switch(action.type) {\n        case REQUEST_CATS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_CATS_SUCCESS:\n            return Object.assign({}, state, { cats: action.payload, isPending: false });\n        case REQUEST_CATS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchCats, requestCats } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchCats, requestCats });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider> ,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}